lines (TrueBeta, power_0.05_halfse, lty = 2, col="red" )
## add legend
legend ("topleft", c(expression(paste("SE")), expression(paste("Half SE"))), lty = c(1,2), col = c("blue","red")
# add vertical lines for x = 0.003 and x= 0.005
abline (v = 0.003, lty = 2)
TrueBeta <- seq(0, 0.01, by = 0.0001)
se <- sqrt(vcov(my_reg2)[2, 2])
# Draw the power curve for one-sided alpha = 0.05
power_0.05 <- 1 - pnorm(qnorm(0.95, mean = 0, sd = 1), mean = TrueBeta/se, sd = 1)
# Create a new power curve for half se
power_0.05_halfse <- 1 - pnorm(qnorm(0.95, mean = 0, sd = 1), mean = TrueBeta/(se/2), sd = 1)
plot(TrueBeta, power_0.05, type = "l", main = "Power curve for unemployment", xlab = "True Beta for Unemployment", ylab = "Power", col = "blue", lty=1)
lines (TrueBeta, power_0.05_halfse, lty = 2, col="red" )
## add legend
legend ("topleft", c(expression(paste("SE")), expression(paste("Half SE"))), lty = c(1,2), col = c("blue","red"))
# add vertical lines for x = 0.003 and x= 0.005
abline (v = 0.003, lty = 2)
abline (v = 0.005, lty = 2)
# label 0.003 and 0.005 on the x-axis
axis(1, at=0.003, labels = 0.003, cex.axis=0.7, mgp = c(2,.4,0))
axis(1, at=0.005, labels = 0.005, cex.axis=0.7, mgp = c(2,.4,0))
knitr::opts_chunk$set(echo = TRUE)
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
# Generate Salary = beta0 + beta1*Ed + epsilon
# beta0 is the constant
# beta1 is the number multiplied by the X variable
# Epsilon has 2 parts: SD is the standard deviation; the bigger it is, the more epsilon varies.
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= coefficients(OLS.result)	 # Put OLS.result coefficients in row ii of CoefMatrix
## For fun: plot results for each survey
## plot(Ed, Salary, pch = 19, col= "darkgreen")
## abline(OLS.result, lwd = 3, col= "darkgreen")
## Sys.sleep(0.075)		## Include to slow down calculations so we can see each plot (briefly); not necessary
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
c(mean(CoefMatrix[,2]), min(CoefMatrix[,2]), max(CoefMatrix[,2]))
#
# For use in Chapter 3, #2 part (g):
#
# Kernel Density Plot
plot(density(CoefMatrix[,2]), main = 'Kernel Density Estimate')
##
## ## Ch3_SimulateBeta_RCode.R
##
##
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# 1st argument is NA, meaning we store "not available" as initial values in the matrix
# 2nd argument is Reps, meaning the number of rows is equal to number of times we run the simulations
# 3rd argument is 2 meaning we have 2 columns, one for storing the beta0 estimate and one for storing the beta1 estimate
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
# Generate Salary = beta0 + beta1*Ed + epsilon
# beta0 is the constant
# beta1 is the number multiplied by the X variable
# Epsilon has 2 parts: SD is the standard deviation; the bigger it is, the more epsilon varies.
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= coefficients(OLS.result)	 # Put OLS.result coefficients in row ii of CoefMatrix
## For fun: plot results for each survey
## plot(Ed, Salary, pch = 19, col= "darkgreen")
## abline(OLS.result, lwd = 3, col= "darkgreen")
## Sys.sleep(0.075)		## Include to slow down calculations so we can see each plot (briefly); not necessary
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of beta_0 estimates
c(mean(CoefMatrix[,2]), min(CoefMatrix[,2]), max(CoefMatrix[,2]))
# Average, min and max of beta_1 estimates
#
# For use in Chapter 3, #2 part (g):
#
# Kernel Density Plot
plot(density(CoefMatrix[,2]), main = 'Kernel Density Estimate')
View(CoefMatrix)
View(OLS.result)
setwd("~/Desktop/GU/Stats/PS3_Chap4")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
load("Ch4_Exercise5_Height_and_Wages_UK")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
load("Ch4_Exercise5_Height_and_Wages_UK.RData")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
load("Ch4_Exercise5_Height_and_Wages_UK.RData")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
#load("Ch4_Exercise5_Height_and_Wages_UK.RData")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
#load("Ch4_Exercise5_Height_and_Wages_UK.RData")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
#load("Ch4_Exercise5_Height_and_Wages_UK.RData")
View(dta)
View(dta)
reg1 <- lm (Unemployment ~ LagDemPresident, data = dta)
summary (reg1)
reg2 <- lm(changeGDPpc ~ LagDemPresident, data = dta)
reg2 <- lm(ChangeGDPpc ~ LagDemPresident, data = dta)
summary(reg2)
Betarange = seq(0, 1000, 100)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "power")
Betarange = seq(0, 1000, 100)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "power", type = "l")
Betarange = seq(0, 1000, 50)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "power", type = "l")
Betarange = seq(0, 1000, 20)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "power", type = "l")
Betarange = seq(0, 1000, 20)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "Power", type = "l")
Betarange = seq(0, 1000, 20)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "Power", type = "l")
legend ("topleft", c(expression(paste(alpha, "=0.01"))), lty = 1)
Betarange = seq(0, 1000, 20)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "Power", type = "l")
legend ("topleft", c(expression(paste(alpha, "=0.01"))), lty = 1)
abline (v = 200, lty = 2)
abline (v = 400, lty = 2)
abline (v = 800, lty = 2)
axis(1, at=200, labels = 200, cex.axis=0.7, mgp = c(2,.4,0))
axis(1, at=400, labels = 400, cex.axis=0.7, mgp = c(2,.4,0))
axis(1, at=800, labels = 800, cex.axis=0.7, mgp = c(2,.4,0))
Betarange = seq(0, 1000, 20)
se <- sqrt(vcov(reg2)[2, 2])
power_0.01 <- 1 - pnorm(qnorm(0.99, mean = 0, sd = 1), mean = Betarange/se, sd = 1)
plot (Betarange, power_0.01, main="Power Curve for ChangeGDPcp ~ LagDemPres model", xlab = "Beta Value", ylab = "Power", type = "l")
legend ("topleft", c(expression(paste(alpha, "=0.01"))), lty = 1)
abline (v = 200, lty = 2)
abline (v = 400, lty = 2)
abline (v = 800, lty = 2)
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 1)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= summary(fit)$coefficients[,3]	 # Put OLS.result t statistics in row ii of CoefMatrix
}							 # This closes the "loop"
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 1)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= summary(OLS.result$fit)$coefficients[,3]	 # Put OLS.result t statistics in row ii of CoefMatrix
}							 # This closes the "loop"
View(OLS.result)
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 1)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= summary(OLS.result)$coefficients[,3]	 # Put OLS.result t statistics in row ii of CoefMatrix
}							 # This closes the "loop"
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 3)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= summary(OLS.result)$coefficients[,3]	 # Put OLS.result t statistics in row ii of CoefMatrix
}							 # This closes the "loop"
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 1)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= summary(OLS.result)$coefficients[,2]	 # Put OLS.result t statistics in row ii of CoefMatrix
}							 # This closes the "loop"
summary (reg1)$coefficients[,3]
summary (reg1)$coefficients[,3][2]
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 1)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics in row ii of CoefMatrix
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
summary(reg1)$coefficients
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
View(CoefMatrix)
c(mean(CoefMatrix[,2]), min(CoefMatrix[,2]), max(CoefMatrix[,2]))
Obs       = 100		# Number of observations in each simulation
Reps      = 500		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 0	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix2	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix2[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix2[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix2[,2]), min(CoefMatrix2[,2]), max(CoefMatrix2[,2]))
CoeffMatrix2
CoefMatrix2
CoefMatrix2_condition <- CoefMatrix2[,2]<0.05
CoefMatrix2_condition <- CoefMatrix2[,2]<0.05
length(CoefMatrix2_condition == TRUE)/Reps
CoefMatrix2_condition <- CoefMatrix2[,2]<0.05
length(CoefMatrix2_condition[CoefMatrix2_condition == TRUE])/Reps
CoefMatrix2_condition <- CoefMatrix2[,2]<0.05
length(CoefMatrix2_condition[CoefMatrix2_condition == TRUE])/500
load("Ch4_Exercise5_Height_and_Wages_UK.RData")
View(dta)
reg3 <- lm (dta$gwage33[dta$gwage33 <= 400] ~ dta$height33[dta$height33>=40])
reg3 <- lm (dta$gwage33 ~ height33, data = dta [(dta$gwage33 <= 400) & (dta$height33>=40)])
reg3 <- lm (gwage33 ~ height33, data = dta [(dta$gwage33 <= 400) & (dta$height33>=40)])
reg3 <- lm (gwage33 ~ height33, data = dta [(dta$gwage33 <= 400) & (dta$height33>=40)])
reg3 <- lm (gwage33 ~ height33, data = dta [(dta$gwage33 <= 400) & (dta$height33>=40)])
reg3 <- lm (gwage33 ~ height33, data = dta [(dta$gwage33 <= 400) & (dta$height33>=40)])
reg3 <- lm (gwage33 ~ height33, data = dta((dta$gwage33 <= 400) & (dta$height33>=40))
summary(reg3)
dta_subset <- subset (dta, (dta$gwage33 <= 400) & (dta$height33>=40))
reg3 <- lm (gwage33 ~ height33, data = dta_subset)
summary(reg3)
View(reg3)
summary(reg3)$coefficients
center <- summary(reg3)$coefficient[,2][1]
center <- summary(reg3)$coefficient[,2][1]
center
center <- summary(reg3)$coefficient[2][1]
center
center <- summary(reg3)$coefficient[2,1]
center
View(reg3)
center <- summary(reg3)$coefficients[2,1]
n <- 3669
error <- qnorm(0.975)*summary(reg3)$coefficients[2,2]
left <- center - error
right <- center + error
left
right
reg4 <- lm (gwage33 ~ height33, data = dta[1:800,])
summary(reg4)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
tinytex::install_tinytex()
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*set.seed(1)rnorm(Obs)
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*set.seed(1).rnorm(Obs)
## Set model and simulation parameters
set.seed(1)
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
## Set model and simulation parameters
set.seed(1)
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
## Set model and simulation parameters
set.seed(1)
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
## Set model and simulation parameters
set.seed(1)
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
## Set model and simulation parameters
set.seed(50)
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of t statistics
c(mean(CoefMatrix[,2]), min(CoefMatrix[,2]), max(CoefMatrix[,2]))
set.seed(500)
Obs       = 100		# Number of observations in each simulation
Reps      = 500		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 0	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix2	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix2[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix2[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix2[,2]), min(CoefMatrix2[,2]), max(CoefMatrix2[,2]))
CoefMatrix2_condition <- CoefMatrix2[,2]<0.05
length(CoefMatrix2_condition[CoefMatrix2_condition == TRUE])/Reps
set.seed(500)
Obs       = 100		# Number of observations in each simulation
Reps      = 500		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 0	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix2	= matrix(NA, Reps, 2)	# Matrix to store our results.
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix2[ii,1]	= summary(OLS.result)$coefficients[,3][2]	 # Put OLS.result t statistics on education in row ii of CoefMatrix
CoefMatrix2[ii,2]  = summary(OLS.result)$coefficients[,4][2]  # Put OLS.result p-value on education in the second column row ii
}							 # This closes the "loop"
c(mean(CoefMatrix2[,2]), min(CoefMatrix2[,2]), max(CoefMatrix2[,2]))
